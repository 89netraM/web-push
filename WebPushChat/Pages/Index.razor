@page "/"
@using Blazored.LocalStorage
@using Lib.Net.Http.WebPush
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using System.Text.Json
@using WebPushChat.Components
@using WebPushChat.Models
@inject VapidKeyService vapidKeyService
@inject SubscriptionService subscriptionService
@inject PeerService peerService
@inject ISyncLocalStorageService localStorage
@inject ILogger<Index> logger

<h1>Web Push Chat</h1>

@if (NotificationsDenied)
{
    <p>Notifications are denied. Please allow them in your browser settings.</p>
    return;
}

@if (subscriptionService.Subscription is null)
{
    <button @onclick="RegisterSubscription">Activate notifications</button>

    return;
}

<ul>
    @foreach (var (peer, _) in peerService.Peers)
    {
        <li><a href="/chat/@peer">@peer</a></li>
    }
</ul>

<hr />

<h2>My peer code:</h2>

<input type="text" @bind-value="Name" placeholder="Name" required>
<button>Set Name</button>

<QrCode QrCodeData="@myPeerInfo" />

<hr />

<h2><a href="/add-peer">Add peer</a></h2>

@code {
    public string Name
    {
        get => localStorage.GetItem<string>(nameof(Name)) ?? string.Empty;
        set
        {
            localStorage.SetItem(nameof(Name), value);
            UpdatePeerInfo();
        }
    }
    public Guid Id
    {
        get => localStorage.GetItem<Guid>(nameof(Id));
        set => localStorage.SetItem(nameof(Id), value);
    }

    public bool NotificationsDenied { get; set; } = false;

    private string myPeerInfo = "";

    protected override void OnInitialized()
    {
        UpdatePeerInfo();
    }

    private async Task RegisterSubscription()
    {
        var subscription = await subscriptionService.RegisterSubscription();

        if (subscription is null)
        {
            NotificationsDenied = true;
            StateHasChanged();
            return;
        }

        UpdatePeerInfo();
    }

    private void UpdatePeerInfo()
    {
        if (Id == Guid.Empty)
        {
            Id = Guid.NewGuid();
        }

        if (subscriptionService.Subscription is { } subscription && !string.IsNullOrEmpty(Name))
        {
            myPeerInfo = JsonSerializer.Serialize(new PeerInfo(
                vapidKeyService.VapidKeys,
                subscription,
                Name,
                Id
            ));
            StateHasChanged();
        }
    }
}
